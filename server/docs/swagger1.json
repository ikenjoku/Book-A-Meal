{
  "swagger": "2.0",
  "info": {
    "description": "This is Book-A-Meal API documentation. You can find out more about Book-A-Meal from the [Homepage](https://ikenjoku-bookameal.herokuapp.com/api/v1).  From this documentation, you can learn more and a good feel of the API.",
    "version": "1.0.0",
    "title": "Book-A-Meal",
    "contact": {
      "email": "ikthegenius@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "ikenjoku-bookameal.herokuapp.com",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Meal",
      "description": "Everything about Meals"
    },
    {
      "name": "Menu",
      "description": "Operations about Menu"
    },
    {
      "name": "Order",
      "description": "Access to Bookameal orders"
    },
    {
      "name": "User",
      "description": "Operations about user"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/meals": {
      "get": {
        "tags": [
          "Meal"
        ],
        "summary": "Get all meal options",
        "description": "Returns a list of all meals available in the application",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Meal"
            }
          },
          "404": {
            "description": "Meals not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Meal"
        ],
        "summary": "Add a new meal option",
        "description": "Add a new meal to the application",
        "operationId": "addMeal",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Meal object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Meal"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/meals/{mealId}": {
      "put": {
        "tags": [
          "Meal"
        ],
        "summary": "Updates a meal in the app with form data",
        "description": "",
        "operationId": "updateMealWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mealId",
            "in": "path",
            "description": "ID of meal that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "New name of the meal",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "New description of the meal",
            "required": false,
            "type": "string"
          },
          {
            "name": "price",
            "in": "formData",
            "description": "New price of the meal",
            "required": false,
            "type": "string"
          },
          {
            "name": "imageurl",
            "in": "formData",
            "description": "New image url of the meal",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Meal"
        ],
        "summary": "Deletes a meal",
        "description": "",
        "operationId": "deleteMeal",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "mealId",
            "in": "path",
            "description": "Meal id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "401": {
            "description": "Forbidden to perform this operation"
          },
          "404": {
            "description": "Meal not found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/menu": {
      "get": {
        "tags": [
          "Menu"
        ],
        "summary": "Get menu of the specified day",
        "description": "Returns a list of all meals available in the application",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "The date of the menu required in YYYY-MM-DD",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Menu"
            }
          },
          "404": {
            "description": "Menu not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Menu"
        ],
        "summary": "Add a new menu to the application",
        "description": "Add a new meal to the application",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "date",
            "description": "Date of the menu to be added",
            "required": false,
            "schema": {
              "$ref": "#/definitions/addMenu"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Menu has not been set for this day"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Returns all the orders",
        "description": "Returns a list of order objects",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Place an order for a meal",
        "description": "Place an order for a meal",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "mealId",
            "description": "order placed for purchasing the meal",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/addOrder"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/orders/{orderId}": {
      "put": {
        "tags": [
          "Order"
        ],
        "summary": "Updates an order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/auth/login": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "mealId": {
          "type": "integer",
          "format": "int64"
        },
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "pending",
            "cancelled",
            "delivered"
          ]
        },
        "complete": {
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "addOrder": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "mealId": {
          "type": "integer",
          "format": "int64"
        },
        "amount": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "addOrder"
      }
    },
    "Menu": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "meals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Meal"
          }
        }
      },
      "xml": {
        "name": "Menu"
      }
    },
    "addMenu": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time",
          "example": "2018-05-17"
        }
      },
      "xml": {
        "name": "addMenu"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Meal": {
      "type": "object",
      "required": [
        "name",
        "description",
        "price",
        "imageurl"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Vegetable Rice"
        },
        "description": {
          "type": "string",
          "example": "Vegetables with meat loaf garlic"
        },
        "price": {
          "type": "integer",
          "format": "int64"
        },
        "imageurl": {
          "type": "string",
          "example": "www.fdfdfdss.sdsdfdxdfdd"
        }
      },
      "xml": {
        "name": "Meal"
      }
    }
  }
}